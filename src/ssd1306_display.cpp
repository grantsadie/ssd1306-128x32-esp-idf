#include "ssd1306_display.h"
#include "esp_log.h"
#include <cstring>
#include <algorithm>

#include "esp_mac.h"

static const char* TAG = "SSD1306";

// Basic 5x8 font data (simplified ASCII characters)
// static const uint8_t font_5x8[96][5] = {
//     {0x00, 0x00, 0x00, 0x00, 0x00}, // ' ' (space)
//     {0x00, 0x00, 0x5F, 0x00, 0x00}, // '!'
//     {0x00, 0x07, 0x00, 0x07, 0x00}, // '"'
//     {0x14, 0x7F, 0x14, 0x7F, 0x14}, // '#'
//     {0x24, 0x2A, 0x7F, 0x2A, 0x12}, // '$'
//     {0x23, 0x13, 0x08, 0x64, 0x62}, // '%'
//     {0x36, 0x49, 0x55, 0x22, 0x50}, // '&'
//     {0x00, 0x05, 0x03, 0x00, 0x00}, // '''
//     {0x00, 0x1C, 0x22, 0x41, 0x00}, // '('
//     {0x00, 0x41, 0x22, 0x1C, 0x00}, // ')'
//     {0x08, 0x2A, 0x1C, 0x2A, 0x08}, // '*'
//     {0x08, 0x08, 0x3E, 0x08, 0x08}, // '+'
//     {0x00, 0x50, 0x30, 0x00, 0x00}, // ','
//     {0x08, 0x08, 0x08, 0x08, 0x08}, // '-'
//     {0x00, 0x60, 0x60, 0x00, 0x00}, // '.'
//     {0x20, 0x10, 0x08, 0x04, 0x02}, // '/'
//     {0x3E, 0x51, 0x49, 0x45, 0x3E}, // '0'
//     {0x00, 0x42, 0x7F, 0x40, 0x00}, // '1'
//     {0x42, 0x61, 0x51, 0x49, 0x46}, // '2'
//     {0x21, 0x41, 0x45, 0x4B, 0x31}, // '3'
//     {0x18, 0x14, 0x12, 0x7F, 0x10}, // '4'
//     {0x27, 0x45, 0x45, 0x45, 0x39}, // '5'
//     {0x3C, 0x4A, 0x49, 0x49, 0x30}, // '6'
//     {0x01, 0x71, 0x09, 0x05, 0x03}, // '7'
//     {0x36, 0x49, 0x49, 0x49, 0x36}, // '8'
//     {0x06, 0x49, 0x49, 0x29, 0x1E}, // '9'
//     {0x00, 0x36, 0x36, 0x00, 0x00}, // ':'
//     {0x00, 0x56, 0x36, 0x00, 0x00}, // ';'
//     {0x00, 0x08, 0x14, 0x22, 0x41}, // '<'
//     {0x14, 0x14, 0x14, 0x14, 0x14}, // '='
//     {0x41, 0x22, 0x14, 0x08, 0x00}, // '>'
//     {0x02, 0x01, 0x51, 0x09, 0x06}, // '?'
//     {0x32, 0x49, 0x79, 0x41, 0x3E}, // '@'
//     {0x7E, 0x11, 0x11, 0x11, 0x7E}, // 'A'
//     {0x7F, 0x49, 0x49, 0x49, 0x36}, // 'B'
//     {0x3E, 0x41, 0x41, 0x41, 0x22}, // 'C'
//     {0x7F, 0x41, 0x41, 0x22, 0x1C}, // 'D'
//     {0x7F, 0x49, 0x49, 0x49, 0x41}, // 'E'
//     {0x7F, 0x09, 0x09, 0x01, 0x01}, // 'F'
//     {0x3E, 0x41, 0x49, 0x49, 0x7A}, // 'G'
//     {0x7F, 0x08, 0x08, 0x08, 0x7F}, // 'H'
//     {0x00, 0x41, 0x7F, 0x41, 0x00}, // 'I'
//     {0x20, 0x40, 0x41, 0x3F, 0x01}, // 'J'
//     {0x7F, 0x08, 0x14, 0x22, 0x41}, // 'K'
//     {0x7F, 0x40, 0x40, 0x40, 0x40}, // 'L'
//     {0x7F, 0x02, 0x04, 0x02, 0x7F}, // 'M'
//     {0x7F, 0x04, 0x08, 0x10, 0x7F}, // 'N'
//     {0x3E, 0x41, 0x41, 0x41, 0x3E}, // 'O'
//     {0x7F, 0x09, 0x09, 0x09, 0x06}, // 'P'
//     {0x3E, 0x41, 0x51, 0x21, 0x5E}, // 'Q'
//     {0x7F, 0x09, 0x19, 0x29, 0x46}, // 'R'
//     {0x46, 0x49, 0x49, 0x49, 0x31}, // 'S'
//     {0x01, 0x01, 0x7F, 0x01, 0x01}, // 'T'
//     {0x3F, 0x40, 0x40, 0x40, 0x3F}, // 'U'
//     {0x1F, 0x20, 0x40, 0x20, 0x1F}, // 'V'
//     {0x7F, 0x20, 0x18, 0x20, 0x7F}, // 'W'
//     {0x63, 0x14, 0x08, 0x14, 0x63}, // 'X'
//     {0x03, 0x04, 0x78, 0x04, 0x03}, // 'Y'
//     {0x61, 0x51, 0x49, 0x45, 0x43}, // 'Z'
// };
const uint8_t Chilling_Nightime16pt7bBitmaps[] = {
  0x00, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66, 0x03,
  0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2, 0x06,
  0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC, 0xFF,
  0xFC, 0x00, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66,
  0x03, 0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2,
  0x06, 0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC,
  0xFF, 0xFC, 0xFF, 0xFC, 0x00, 0x60, 0x03, 0x0F, 0x18, 0xDC, 0xC6, 0x66,
  0x03, 0x30, 0x11, 0x81, 0x8C, 0x18, 0x60, 0x83, 0x08, 0x18, 0x40, 0xC2,
  0x06, 0x00, 0x30, 0x01, 0x86, 0x0C, 0x38, 0x60, 0x83, 0x00, 0x19, 0xFC,
  0xFF, 0xFC, 0x00 };

// const GFXglyph Chilling_Nightime16pt7bGlyphs[] PROGMEM = {
//   {     0,   1,   1,   1,    0,    0 },   // 0x00
//   {     1,  13,  22,  14,    0,  -21 },   // 0x01
//   {    37,  13,  22,  14,    0,  -21 },   // 0x02
//   {    73,  13,  22,  14,    0,  -21 },   // 0x03
//   {   109,  13,  22,  14,    0,  -21 },   // 0x04
//   {   145,  13,  22,  14,    0,  -21 },   // 0x05
//   {   181,  13,  22,  14,    0,  -21 },   // 0x06
//   {   217,  13,  22,  14,    0,  -21 },   // 0x07
//   {   253,  13,  22,  14,    0,  -21 },   // 0x08
//   {   289,  13,  22,  14,    0,  -21 },   // 0x09
//   {   325,  13,  22,  14,    0,  -21 },   // 0x0A
//   {   361,  13,  22,  14,    0,  -21 },   // 0x0B
//   {   397,  13,  22,  14,    0,  -21 },   // 0x0C
//   {   433,  13,  22,  14,    0,  -21 },   // 0x0D
//   {   469,  13,  22,  14,    0,  -21 },   // 0x0E
//   {   505,  13,  22,  14,    0,  -21 },   // 0x0F
//   {   541,  13,  22,  14,    0,  -21 },   // 0x10
//   {   577,  13,  22,  14,    0,  -21 },   // 0x11
//   {   613,  13,  22,  14,    0,  -21 },   // 0x12
//   {   649,  13,  22,  14,    0,  -21 },   // 0x13
//   {   685,  13,  22,  14,    0,  -21 },   // 0x14
//   {   721,  13,  22,  14,    0,  -21 },   // 0x15
//   {   757,  13,  22,  14,    0,  -21 },   // 0x16
//   {   793,  13,  22,  14,    0,  -21 },   // 0x17
//   {   829,  13,  22,  14,    0,  -21 },   // 0x18
//   {   865,  13,  22,  14,    0,  -21 },   // 0x19
//   {   901,  13,  22,  14,    0,  -21 },   // 0x1A
//   {   937,  13,  22,  14,    0,  -21 },   // 0x1B
//   {   973,  13,  22,  14,    0,  -21 },   // 0x1C
//   {  1009,   1,   1,   1,    0,    0 },   // 0x1D
//   {  1010,  13,  22,  14,    0,  -21 },   // 0x1E
//   {  1046,  13,  22,  14,    0,  -21 },   // 0x1F
//   {  1082,   1,   1,   7,    0,    0 } }; // 0x20

  static const uint8_t font_5x8[][5] = {
    {0x00,0x00,0x00,0x00,0x00},	// 0x20
    {0x00,0x00,0x2F,0x00,0x00},	// 0x21
    {0x00,0x03,0x00,0x03,0x00},	// 0x22
    {0x34,0x1C,0x36,0x1C,0x16},	// 0x23
    {0x00,0x26,0x7F,0x32,0x00},	// 0x24
    {0x32,0x0D,0x1E,0x2C,0x13},	// 0x25
    {0x18,0x26,0x2D,0x12,0x28},	// 0x26
    {0x00,0x00,0x03,0x00,0x00},	// 0x27
    {0x00,0x1C,0x22,0x41,0x41},	// 0x28
    {0x41,0x41,0x22,0x1C,0x00},	// 0x29
    {0x00,0x0A,0x05,0x0A,0x00},	// 0x2A
    {0x00,0x10,0x38,0x10,0x00},	// 0x2B
    {0x00,0x80,0x60,0x00,0x00},	// 0x2C
    {0x00,0x08,0x08,0x08,0x00},	// 0x2D
    {0x00,0x00,0x20,0x00,0x00},	// 0x2E
    {0x00,0x60,0x18,0x06,0x01},	// 0x2F
    {0x00,0x1E,0x21,0x21,0x1E},	// 0x30
    {0x00,0x22,0x3F,0x20,0x00},	// 0x31
    {0x00,0x31,0x29,0x26,0x00},	// 0x32
    {0x00,0x25,0x25,0x1A,0x00},	// 0x33
    {0x00,0x0C,0x0A,0x3F,0x08},	// 0x34
    {0x00,0x27,0x25,0x19,0x00},	// 0x35
    {0x00,0x1E,0x25,0x25,0x18},	// 0x36
    {0x00,0x01,0x39,0x05,0x03},	// 0x37
    {0x00,0x1A,0x25,0x25,0x1A},	// 0x38
    {0x00,0x06,0x29,0x29,0x1E},	// 0x39
    {0x00,0x00,0x24,0x00,0x00},	// 0x3A
    {0x00,0x80,0x64,0x00,0x00},	// 0x3B
    {0x00,0x08,0x08,0x14,0x22},	// 0x3C
    {0x00,0x14,0x14,0x14,0x14},	// 0x3D
    {0x00,0x22,0x14,0x08,0x08},	// 0x3E
    {0x00,0x01,0x29,0x05,0x02},	// 0x3F
    {0x3C,0x42,0x59,0x55,0x5E},	// 0x40
    {0x30,0x1C,0x12,0x1C,0x30},	// 0x41
    {0x00,0x3E,0x2A,0x36,0x00},	// 0x42
    {0x00,0x1C,0x22,0x22,0x22},	// 0x43
    {0x00,0x3E,0x22,0x22,0x1C},	// 0x44
    {0x00,0x3E,0x2A,0x2A,0x00},	// 0x45
    {0x00,0x3E,0x0A,0x0A,0x00},	// 0x46
    {0x00,0x1C,0x22,0x2A,0x3A},	// 0x47
    {0x00,0x3E,0x08,0x08,0x3E},	// 0x48
    {0x00,0x22,0x3E,0x22,0x00},	// 0x49
    {0x00,0x22,0x22,0x1E,0x00},	// 0x4A
    {0x00,0x3E,0x08,0x14,0x22},	// 0x4B
    {0x00,0x3E,0x20,0x20,0x20},	// 0x4C
    {0x3E,0x04,0x18,0x04,0x3E},	// 0x4D
    {0x00,0x3E,0x04,0x08,0x3E},	// 0x4E
    {0x1C,0x22,0x22,0x22,0x1C},	// 0x4F
    {0x00,0x3E,0x0A,0x0A,0x04},	// 0x50
    {0x1C,0x22,0x22,0x62,0x9C},	// 0x51
    {0x00,0x3E,0x0A,0x14,0x20},	// 0x52
    {0x00,0x24,0x2A,0x12,0x00},	// 0x53
    {0x02,0x02,0x3E,0x02,0x02},	// 0x54
    {0x00,0x1E,0x20,0x20,0x1E},	// 0x55
    {0x00,0x0E,0x30,0x30,0x0E},	// 0x56
    {0x0E,0x30,0x0C,0x30,0x0E},	// 0x57
    {0x22,0x14,0x08,0x14,0x22},	// 0x58
    {0x02,0x04,0x38,0x04,0x02},	// 0x59
    {0x00,0x32,0x2A,0x2A,0x26},	// 0x5A
    {0x00,0x00,0x7F,0x41,0x00},	// 0x5B
    {0x01,0x06,0x18,0x60,0x00},	// 0x5C
    {0x00,0x41,0x7F,0x00,0x00},	// 0x5D
    {0x18,0x06,0x01,0x06,0x18},	// 0x5E
    {0x40,0x40,0x40,0x40,0x40},	// 0x5F
    {0x00,0x01,0x02,0x00,0x00},	// 0x60
    {0x00,0x34,0x34,0x38,0x20},	// 0x61
    {0x00,0x3F,0x24,0x24,0x18},	// 0x62
    {0x00,0x18,0x24,0x24,0x00},	// 0x63
    {0x18,0x24,0x24,0x3F,0x00},	// 0x64
    {0x00,0x18,0x2C,0x28,0x00},	// 0x65
    {0x00,0x04,0x3E,0x05,0x05},	// 0x66
    {0x00,0x58,0x54,0x54,0x3C},	// 0x67
    {0x00,0x3F,0x08,0x04,0x38},	// 0x68
    {0x00,0x04,0x3D,0x00,0x00},	// 0x69
    {0x00,0x44,0x44,0x3D,0x00},	// 0x6A
    {0x00,0x3F,0x08,0x14,0x20},	// 0x6B
    {0x00,0x01,0x3F,0x00,0x00},	// 0x6C
    {0x3C,0x08,0x3C,0x08,0x3C},	// 0x6D
    {0x00,0x3C,0x08,0x04,0x38},	// 0x6E
    {0x00,0x18,0x24,0x24,0x18},	// 0x6F
    {0x00,0x7C,0x24,0x24,0x18},	// 0x70
    {0x18,0x24,0x24,0x7C,0x00},	// 0x71
    {0x00,0x3C,0x08,0x04,0x00},	// 0x72
    {0x00,0x28,0x2C,0x14,0x00},	// 0x73
    {0x00,0x04,0x1E,0x24,0x04},	// 0x74
    {0x00,0x1C,0x20,0x10,0x3C},	// 0x75
    {0x00,0x0C,0x30,0x30,0x0C},	// 0x76
    {0x0C,0x30,0x1C,0x30,0x0C},	// 0x77
    {0x00,0x24,0x18,0x18,0x24},	// 0x78
    {0x40,0x4C,0x70,0x30,0x0C},	// 0x79
    {0x00,0x34,0x2C,0x2C,0x00},	// 0x7A
    {0x00,0x08,0x36,0x41,0x00},	// 0x7B
    {0x00,0x00,0x7F,0x00,0x00},	// 0x7C
    {0x00,0x41,0x36,0x08,0x00},	// 0x7D
    {0x10,0x08,0x08,0x10,0x08},	// 0x7E
    {0x00,0x3C,0x22,0x3C,0x00},	// 0x7F
  };

//   gdldfont.c
  static const unsigned char font[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x5B, 0x4F, 0x5B, 0x3E, 0x3E, 0x6B,
    0x4F, 0x6B, 0x3E, 0x1C, 0x3E, 0x7C, 0x3E, 0x1C, 0x18, 0x3C, 0x7E, 0x3C,
    0x18, 0x1C, 0x57, 0x7D, 0x57, 0x1C, 0x1C, 0x5E, 0x7F, 0x5E, 0x1C, 0x00,
    0x18, 0x3C, 0x18, 0x00, 0xFF, 0xE7, 0xC3, 0xE7, 0xFF, 0x00, 0x18, 0x24,
    0x18, 0x00, 0xFF, 0xE7, 0xDB, 0xE7, 0xFF, 0x30, 0x48, 0x3A, 0x06, 0x0E,
    0x26, 0x29, 0x79, 0x29, 0x26, 0x40, 0x7F, 0x05, 0x05, 0x07, 0x40, 0x7F,
    0x05, 0x25, 0x3F, 0x5A, 0x3C, 0xE7, 0x3C, 0x5A, 0x7F, 0x3E, 0x1C, 0x1C,
    0x08, 0x08, 0x1C, 0x1C, 0x3E, 0x7F, 0x14, 0x22, 0x7F, 0x22, 0x14, 0x5F,
    0x5F, 0x00, 0x5F, 0x5F, 0x06, 0x09, 0x7F, 0x01, 0x7F, 0x00, 0x66, 0x89,
    0x95, 0x6A, 0x60, 0x60, 0x60, 0x60, 0x60, 0x94, 0xA2, 0xFF, 0xA2, 0x94,
    0x08, 0x04, 0x7E, 0x04, 0x08, 0x10, 0x20, 0x7E, 0x20, 0x10, 0x08, 0x08,
    0x2A, 0x1C, 0x08, 0x08, 0x1C, 0x2A, 0x08, 0x08, 0x1E, 0x10, 0x10, 0x10,
    0x10, 0x0C, 0x1E, 0x0C, 0x1E, 0x0C, 0x30, 0x38, 0x3E, 0x38, 0x30, 0x06,
    0x0E, 0x3E, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F,
    0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14,
    0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x23, 0x13, 0x08, 0x64, 0x62, 0x36, 0x49,
    0x56, 0x20, 0x50, 0x00, 0x08, 0x07, 0x03, 0x00, 0x00, 0x1C, 0x22, 0x41,
    0x00, 0x00, 0x41, 0x22, 0x1C, 0x00, 0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 0x08,
    0x08, 0x3E, 0x08, 0x08, 0x00, 0x80, 0x70, 0x30, 0x00, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x00, 0x00, 0x60, 0x60, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02,
    0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x42, 0x7F, 0x40, 0x00, 0x72, 0x49,
    0x49, 0x49, 0x46, 0x21, 0x41, 0x49, 0x4D, 0x33, 0x18, 0x14, 0x12, 0x7F,
    0x10, 0x27, 0x45, 0x45, 0x45, 0x39, 0x3C, 0x4A, 0x49, 0x49, 0x31, 0x41,
    0x21, 0x11, 0x09, 0x07, 0x36, 0x49, 0x49, 0x49, 0x36, 0x46, 0x49, 0x49,
    0x29, 0x1E, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x40, 0x34, 0x00, 0x00,
    0x00, 0x08, 0x14, 0x22, 0x41, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x41,
    0x22, 0x14, 0x08, 0x02, 0x01, 0x59, 0x09, 0x06, 0x3E, 0x41, 0x5D, 0x59,
    0x4E, 0x7C, 0x12, 0x11, 0x12, 0x7C, 0x7F, 0x49, 0x49, 0x49, 0x36, 0x3E,
    0x41, 0x41, 0x41, 0x22, 0x7F, 0x41, 0x41, 0x41, 0x3E, 0x7F, 0x49, 0x49,
    0x49, 0x41, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x3E, 0x41, 0x41, 0x51, 0x73,
    0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x41, 0x7F, 0x41, 0x00, 0x20, 0x40,
    0x41, 0x3F, 0x01, 0x7F, 0x08, 0x14, 0x22, 0x41, 0x7F, 0x40, 0x40, 0x40,
    0x40, 0x7F, 0x02, 0x1C, 0x02, 0x7F, 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x3E,
    0x41, 0x41, 0x41, 0x3E, 0x7F, 0x09, 0x09, 0x09, 0x06, 0x3E, 0x41, 0x51,
    0x21, 0x5E, 0x7F, 0x09, 0x19, 0x29, 0x46, 0x26, 0x49, 0x49, 0x49, 0x32,
    0x03, 0x01, 0x7F, 0x01, 0x03, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x1F, 0x20,
    0x40, 0x20, 0x1F, 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x63, 0x14, 0x08, 0x14,
    0x63, 0x03, 0x04, 0x78, 0x04, 0x03, 0x61, 0x59, 0x49, 0x4D, 0x43, 0x00,
    0x7F, 0x41, 0x41, 0x41, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x41, 0x41,
    0x41, 0x7F, 0x04, 0x02, 0x01, 0x02, 0x04, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x00, 0x03, 0x07, 0x08, 0x00, 0x20, 0x54, 0x54, 0x78, 0x40, 0x7F, 0x28,
    0x44, 0x44, 0x38, 0x38, 0x44, 0x44, 0x44, 0x28, 0x38, 0x44, 0x44, 0x28,
    0x7F, 0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x08, 0x7E, 0x09, 0x02, 0x18,
    0xA4, 0xA4, 0x9C, 0x78, 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00, 0x44, 0x7D,
    0x40, 0x00, 0x20, 0x40, 0x40, 0x3D, 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,
    0x00, 0x41, 0x7F, 0x40, 0x00, 0x7C, 0x04, 0x78, 0x04, 0x78, 0x7C, 0x08,
    0x04, 0x04, 0x78, 0x38, 0x44, 0x44, 0x44, 0x38, 0xFC, 0x18, 0x24, 0x24,
    0x18, 0x18, 0x24, 0x24, 0x18, 0xFC, 0x7C, 0x08, 0x04, 0x04, 0x08, 0x48,
    0x54, 0x54, 0x54, 0x24, 0x04, 0x04, 0x3F, 0x44, 0x24, 0x3C, 0x40, 0x40,
    0x20, 0x7C, 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x3C, 0x40, 0x30, 0x40, 0x3C,
    0x44, 0x28, 0x10, 0x28, 0x44, 0x4C, 0x90, 0x90, 0x90, 0x7C, 0x44, 0x64,
    0x54, 0x4C, 0x44, 0x00, 0x08, 0x36, 0x41, 0x00, 0x00, 0x00, 0x77, 0x00,
    0x00, 0x00, 0x41, 0x36, 0x08, 0x00, 0x02, 0x01, 0x02, 0x04, 0x02, 0x3C,
    0x26, 0x23, 0x26, 0x3C, 0x1E, 0xA1, 0xA1, 0x61, 0x12, 0x3A, 0x40, 0x40,
    0x20, 0x7A, 0x38, 0x54, 0x54, 0x55, 0x59, 0x21, 0x55, 0x55, 0x79, 0x41,
    0x22, 0x54, 0x54, 0x78, 0x42, // a-umlaut
    0x21, 0x55, 0x54, 0x78, 0x40, 0x20, 0x54, 0x55, 0x79, 0x40, 0x0C, 0x1E,
    0x52, 0x72, 0x12, 0x39, 0x55, 0x55, 0x55, 0x59, 0x39, 0x54, 0x54, 0x54,
    0x59, 0x39, 0x55, 0x54, 0x54, 0x58, 0x00, 0x00, 0x45, 0x7C, 0x41, 0x00,
    0x02, 0x45, 0x7D, 0x42, 0x00, 0x01, 0x45, 0x7C, 0x40, 0x7D, 0x12, 0x11,
    0x12, 0x7D, // A-umlaut
    0xF0, 0x28, 0x25, 0x28, 0xF0, 0x7C, 0x54, 0x55, 0x45, 0x00, 0x20, 0x54,
    0x54, 0x7C, 0x54, 0x7C, 0x0A, 0x09, 0x7F, 0x49, 0x32, 0x49, 0x49, 0x49,
    0x32, 0x3A, 0x44, 0x44, 0x44, 0x3A, // o-umlaut
    0x32, 0x4A, 0x48, 0x48, 0x30, 0x3A, 0x41, 0x41, 0x21, 0x7A, 0x3A, 0x42,
    0x40, 0x20, 0x78, 0x00, 0x9D, 0xA0, 0xA0, 0x7D, 0x3D, 0x42, 0x42, 0x42,
    0x3D, // O-umlaut
    0x3D, 0x40, 0x40, 0x40, 0x3D, 0x3C, 0x24, 0xFF, 0x24, 0x24, 0x48, 0x7E,
    0x49, 0x43, 0x66, 0x2B, 0x2F, 0xFC, 0x2F, 0x2B, 0xFF, 0x09, 0x29, 0xF6,
    0x20, 0xC0, 0x88, 0x7E, 0x09, 0x03, 0x20, 0x54, 0x54, 0x79, 0x41, 0x00,
    0x00, 0x44, 0x7D, 0x41, 0x30, 0x48, 0x48, 0x4A, 0x32, 0x38, 0x40, 0x40,
    0x22, 0x7A, 0x00, 0x7A, 0x0A, 0x0A, 0x72, 0x7D, 0x0D, 0x19, 0x31, 0x7D,
    0x26, 0x29, 0x29, 0x2F, 0x28, 0x26, 0x29, 0x29, 0x29, 0x26, 0x30, 0x48,
    0x4D, 0x40, 0x20, 0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x38, 0x2F, 0x10, 0xC8, 0xAC, 0xBA, 0x2F, 0x10, 0x28, 0x34, 0xFA, 0x00,
    0x00, 0x7B, 0x00, 0x00, 0x08, 0x14, 0x2A, 0x14, 0x22, 0x22, 0x14, 0x2A,
    0x14, 0x08, 0x55, 0x00, 0x55, 0x00, 0x55, // #176 (25% block) missing in old
                                              // code
    0xAA, 0x55, 0xAA, 0x55, 0xAA,             // 50% block
    0xFF, 0x55, 0xFF, 0x55, 0xFF,             // 75% block
    0x00, 0x00, 0x00, 0xFF, 0x00, 0x10, 0x10, 0x10, 0xFF, 0x00, 0x14, 0x14,
    0x14, 0xFF, 0x00, 0x10, 0x10, 0xFF, 0x00, 0xFF, 0x10, 0x10, 0xF0, 0x10,
    0xF0, 0x14, 0x14, 0x14, 0xFC, 0x00, 0x14, 0x14, 0xF7, 0x00, 0xFF, 0x00,
    0x00, 0xFF, 0x00, 0xFF, 0x14, 0x14, 0xF4, 0x04, 0xFC, 0x14, 0x14, 0x17,
    0x10, 0x1F, 0x10, 0x10, 0x1F, 0x10, 0x1F, 0x14, 0x14, 0x14, 0x1F, 0x00,
    0x10, 0x10, 0x10, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x10, 0x10, 0x10,
    0x10, 0x1F, 0x10, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x00, 0x00, 0x00, 0xFF,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xFF, 0x10, 0x00,
    0x00, 0x00, 0xFF, 0x14, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x1F,
    0x10, 0x17, 0x00, 0x00, 0xFC, 0x04, 0xF4, 0x14, 0x14, 0x17, 0x10, 0x17,
    0x14, 0x14, 0xF4, 0x04, 0xF4, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x14, 0x14,
    0x14, 0x14, 0x14, 0x14, 0x14, 0xF7, 0x00, 0xF7, 0x14, 0x14, 0x14, 0x17,
    0x14, 0x10, 0x10, 0x1F, 0x10, 0x1F, 0x14, 0x14, 0x14, 0xF4, 0x14, 0x10,
    0x10, 0xF0, 0x10, 0xF0, 0x00, 0x00, 0x1F, 0x10, 0x1F, 0x00, 0x00, 0x00,
    0x1F, 0x14, 0x00, 0x00, 0x00, 0xFC, 0x14, 0x00, 0x00, 0xF0, 0x10, 0xF0,
    0x10, 0x10, 0xFF, 0x10, 0xFF, 0x14, 0x14, 0x14, 0xFF, 0x14, 0x10, 0x10,
    0x10, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x10, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x38, 0x44, 0x44,
    0x38, 0x44, 0xFC, 0x4A, 0x4A, 0x4A, 0x34, // sharp-s or beta
    0x7E, 0x02, 0x02, 0x06, 0x06, 0x02, 0x7E, 0x02, 0x7E, 0x02, 0x63, 0x55,
    0x49, 0x41, 0x63, 0x38, 0x44, 0x44, 0x3C, 0x04, 0x40, 0x7E, 0x20, 0x1E,
    0x20, 0x06, 0x02, 0x7E, 0x02, 0x02, 0x99, 0xA5, 0xE7, 0xA5, 0x99, 0x1C,
    0x2A, 0x49, 0x2A, 0x1C, 0x4C, 0x72, 0x01, 0x72, 0x4C, 0x30, 0x4A, 0x4D,
    0x4D, 0x30, 0x30, 0x48, 0x78, 0x48, 0x30, 0xBC, 0x62, 0x5A, 0x46, 0x3D,
    0x3E, 0x49, 0x49, 0x49, 0x00, 0x7E, 0x01, 0x01, 0x01, 0x7E, 0x2A, 0x2A,
    0x2A, 0x2A, 0x2A, 0x44, 0x44, 0x5F, 0x44, 0x44, 0x40, 0x51, 0x4A, 0x44,
    0x40, 0x40, 0x44, 0x4A, 0x51, 0x40, 0x00, 0x00, 0xFF, 0x01, 0x03, 0xE0,
    0x80, 0xFF, 0x00, 0x00, 0x08, 0x08, 0x6B, 0x6B, 0x08, 0x36, 0x12, 0x36,
    0x24, 0x36, 0x06, 0x0F, 0x09, 0x0F, 0x06, 0x00, 0x00, 0x18, 0x18, 0x00,
    0x00, 0x00, 0x10, 0x10, 0x00, 0x30, 0x40, 0xFF, 0x01, 0x01, 0x00, 0x1F,
    0x01, 0x01, 0x1E, 0x00, 0x19, 0x1D, 0x17, 0x12, 0x00, 0x3C, 0x3C, 0x3C,
    0x3C, 0x00, 0x00, 0x00, 0x00, 0x00 // #255 NBSP
};

SSD1306Display::SSD1306Display(gpio_num_t sda_pin, gpio_num_t scl_pin, 
                               i2c_port_t port, uint8_t address)
    : _i2c_port(port), _device_address(address), _sda_pin(sda_pin), 
      _scl_pin(scl_pin), _initialized(false) {
    memset(_display_buffer, 0, sizeof(_display_buffer));
}

SSD1306Display::~SSD1306Display() {
    if (initialized()) {
        // i2c_driver_delete(i2c_port);
    }
}

// https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-reference/peripherals/i2c.html
esp_err_t SSD1306Display::initialize() {
    // configure I2C
    i2c_master_bus_config_t i2c_config = {};
    i2c_config.sda_io_num = _sda_pin;
    i2c_config.scl_io_num = _scl_pin;
    i2c_config.i2c_port = _i2c_port; 
    i2c_config.glitch_ignore_cnt = 7; // typical value for glitch filtering
    i2c_config.clk_source = I2C_CLK_SRC_DEFAULT;
    i2c_config.flags = {
        .enable_internal_pullup = 1, // enable internal pull-ups. required 
        .allow_pd = 0 //  before sleep, will backup the I2C register which will be restored
    };

    i2c_master_bus_handle_t i2c_handle;
    ESP_ERROR_CHECK(i2c_new_master_bus(&i2c_config, &i2c_handle));

    i2c_device_config_t dev_cfg = {};
    dev_cfg.dev_addr_length = I2C_ADDR_BIT_LEN_7;
    dev_cfg.device_address = _device_address;
    dev_cfg.scl_speed_hz = 400000;

    i2c_master_dev_handle_t dev_handle;
    ESP_ERROR_CHECK(i2c_master_bus_add_device(i2c_handle, &dev_cfg, &dev_handle));

    // store the device handle for later use
    _i2c_bus_handle = i2c_handle;
    _i2c_device_handle = dev_handle;

    // init SSD1306 display. these parameters were fine tuned by me, the ones below were copied and pasted from other libraries for testing
    uint8_t init_commands[] = {
        0x00,
        0xAE, // Turn display off
        0xA8, 0x1F, // Set multiplex ratio (0x1F for 128x32). 0x3F for 128x64
        0xD3, 0x00, // Set display offset to 0
        0x40, // Set display start line to 0
        // to flip, need to flip segment re-map to 0xA0 - 0xA1 and COM output scan dir to 0xC0 - 0xC8
        0xA1, // Set segment re-map
        0xC8,  // 0xC0, Set COM output scan direction. This sets the display to scan from bottom to top. Need to invers this if using flipped display
        0xD5, 0x80, // Freq should be fine at 0x80. Investigate if flickering / ghosting occurs
        0xDA, 0x02, // Set COM pins hardware configuration (0x02 for 128x32, 0x12 for 128x64 i think)
        // 0x00, 0x10,
        0x81, 0x8F, // Set contrast control (0x3F for max contrast)
        0xA4, // Disable entire display on
        0xDB, 0x20, // VCOMH deselect level, I've seen others use 0x20 (spec sheets) and 0x40 (adafruit). Going to try with 0x20 for now.
                    // This parameter affects dimming and flickering
        // 0xA1, // Set Segment Re-map
        0x20, 0x00,
        0x8D, 0x14, // Enable charge pump regulator
        0x2E,
        0xA6,
        0xAF
    };

    // uint8_t init_commands[] = {
    //     0xAE,       // Display off
    //     0xA8, 0x1F,
    //     0xD3, 0x00,
    //     0x40,
    //     0xA0,
    //     0xC0,
    //     0xD5, 0x80,
    //     0xDA, 0x02, // 0x02 for 128x32, 0x12 for 128x64
    //     0x81, 0x8F, // Contrast control
    //     0xA4,
    //     0xDB, 0x40,
    //     0x20, 0x00, // Set Memory Addressing Mode to Horizontal
    //     0x8D, 0x14, // Enable charge pump regulator
    //     0x2E,
    //     0xA6,
    //     0xAF
    // };

    // AI  v2
    // uint8_t init_commands[] = {
    //     0xAE,       // Display off
    //     0xD5, 0x80, // Set display clock divide ratio/oscillator frequency
    //     0xA8, 0x1F, // Set multiplex ratio (0x1F = 31 for 128x32)
    //     0xD3, 0x00, // Set display offset
    //     0x40,       // Set display start line
    //     0x8D, 0x14, // Enable charge pump regulator
    //     0x20, 0x00, // Set Memory Addressing Mode to Horizontal
    //     0xA1,       // Set Segment Re-map (0xA0 for normal, 0xA1 for flipped)
    //     0xC8,       // Set COM Output Scan Direction (0xC0 for normal, 0xC8 for flipped)
    //     0xDA, 0x02, // Set COM pins hardware configuration (0x02 for 128x32)
    //     0x81, 0x8F, // Set contrast control (0x8F is a good starting point)
    //     0xD9, 0xF1, // Set pre-charge period
    //     0xDB, 0x40, // Set VCOMH deselect level
    //     0xA4,       // Disable entire display on
    //     0xA6,       // Set normal display (not inverted)
    //     0x2E,       // Deactivate scroll
    //     0xAF        // Display on
    // };
    
    esp_err_t res;
    res = i2c_master_transmit(dev_handle, init_commands, sizeof(init_commands), -1);

    // uint8_t init_commands[] = {
    //     0xAE, // Display off
    //     0x20, 0x02, // Set Memory Addressing Mode to Horizontal
    //     0xB0, // Set Page Start Address for Page Addressing Mode
    //     0xC8, // Set COM Output Scan Direction
    //     0x00, // Set low column address
    //     0x10, // Set high column address
    //     0x40, // Set start line address
    //     0x81, 0x3F, // Set contrast control register
    //     0xA1, // Set Segment Re-map
    //     0xA6, // Set display mode (normal)
    //     0xA8, 0x1F, // Set multiplex ratio
    //     0xA4, // Output RAM to Display
    //     0xD3, 0x00, // Set display offset
    //     0xD5, 0xF0, // Set display clock divide ratio/oscillator frequency
    //     0xD9, 0x22, // Set pre-charge period
    //     0xDA, 0x02, // Set com pins hardware configuration (0x02 for 128x32)
    //     0xDB, 0x20, // Set vcomh
    //     0x8D, 0x14, // Set DC-DC enable
    //     0xAF  // Display on
    // };
    // for (size_t i = 0; i < sizeof(init_commands); i++) {
    //     res = write_command(init_commands[i]);
    //     if (res != ESP_OK) {
    //         ESP_LOGE(TAG, "Failed to send command 0x%02X", init_commands[i]);
    //         return res;
    //     }
    // }

    _initialized = true;
    clear();
    display();

    // uint8_t out_buf[27];
	// int out_index = 0;
	// out_buf[out_index++] = OLED_CONTROL_BYTE_CMD_STREAM;
	// out_buf[out_index++] = OLED_CMD_DISPLAY_OFF;				// AE
	// out_buf[out_index++] = OLED_CMD_SET_MUX_RATIO;			 // A8
	// out_buf[out_index++] = 0x1F;
	// out_buf[out_index++] = OLED_CMD_SET_DISPLAY_OFFSET;		 // D3
	// out_buf[out_index++] = 0x00;
	// //out_buf[out_index++] = OLED_CONTROL_BYTE_DATA_STREAM;	// 40
	// out_buf[out_index++] = OLED_CMD_SET_DISPLAY_START_LINE;	// 40
	// //out_buf[out_index++] = OLED_CMD_SET_SEGMENT_REMAP;		// A1
    // out_buf[out_index++] = OLED_CMD_SET_SEGMENT_REMAP_1;	// A1
	// out_buf[out_index++] = OLED_CMD_SET_COM_SCAN_MODE;		// C8
	// out_buf[out_index++] = OLED_CMD_SET_DISPLAY_CLK_DIV;		// D5
	// out_buf[out_index++] = 0x80;
	// out_buf[out_index++] = OLED_CMD_SET_COM_PIN_MAP;			// DA
	// out_buf[out_index++] = 0x02;
	// out_buf[out_index++] = OLED_CMD_SET_CONTRAST;			// 81
	// out_buf[out_index++] = 0xFF;
	// out_buf[out_index++] = OLED_CMD_DISPLAY_RAM;				// A4
	// out_buf[out_index++] = OLED_CMD_SET_VCOMH_DESELCT;		// DB
	// out_buf[out_index++] = 0x40;
	// out_buf[out_index++] = OLED_CMD_SET_MEMORY_ADDR_MODE;	// 20
	// //out_buf[out_index++] = OLED_CMD_SET_HORI_ADDR_MODE;	// 00
	// out_buf[out_index++] = OLED_CMD_SET_PAGE_ADDR_MODE;		// 02
	// // Set Lower Column Start Address for Page Addressing Mode
	// out_buf[out_index++] = 0x00;
	// // Set Higher Column Start Address for Page Addressing Mode
	// out_buf[out_index++] = 0x10;
	// out_buf[out_index++] = OLED_CMD_SET_CHARGE_PUMP;			// 8D
	// out_buf[out_index++] = 0x14;
	// out_buf[out_index++] = OLED_CMD_DEACTIVE_SCROLL;			// 2E
	// out_buf[out_index++] = OLED_CMD_DISPLAY_NORMAL;			// A6
	// out_buf[out_index++] = OLED_CMD_DISPLAY_ON;				// AF

	// // esp_err_t res;
	// res = i2c_master_transmit(i2c_device_handle, out_buf, out_index, -1);

    return res;

}

esp_err_t SSD1306Display::write_command(uint8_t command) {
    uint8_t data[] = {0x00, command}; // 0x00 for command mode
    esp_err_t ret = i2c_master_transmit(_i2c_device_handle, data, sizeof(data), -1);
    
    // i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    // i2c_master_start(cmd);
    // i2c_master_write_byte(cmd, (device_address << 1) | I2C_MASTER_WRITE, true);
    // i2c_master_write(cmd, data, sizeof(data), true);
    // i2c_master_stop(cmd);
    
    // esp_err_t ret = i2c_master_cmd_begin(i2c_port, cmd, pdMS_TO_TICKS(100));
    // i2c_cmd_link_delete(cmd);
    return ret;
}

esp_err_t SSD1306Display::write_data(const uint8_t* data, size_t len) {
    uint8_t control_byte = 0x40; // Data mode
        // Create buffer with control byte + data
    uint8_t* buffer = new uint8_t[len + 1];
    buffer[0] = control_byte;
    memcpy(buffer + 1, data, len);
    
    esp_err_t ret = i2c_master_transmit(_i2c_device_handle, buffer, len + 1, -1);
    
    delete[] buffer;
    return ret;
    // esp_err_t ret = i2c_master_transmit(i2c_device_handle, data, sizeof(data), -1);
    
    // i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    // i2c_master_start(cmd);
    // i2c_master_write_byte(cmd, (device_address << 1) | I2C_MASTER_WRITE, true);
    // i2c_master_write_byte(cmd, control_byte, true);
    // i2c_master_write(cmd, data, len, true);
    // i2c_master_stop(cmd);
    
    // esp_err_t ret = i2c_master_cmd_begin(i2c_port, cmd, pdMS_TO_TICKS(100));
    // i2c_cmd_link_delete(cmd);
    
    // return ret;
}

void SSD1306Display::clear() {
    memset(_display_buffer, 0, sizeof(_display_buffer));
}

void SSD1306Display::display() {
    if (!initialized()) return;
    
    // set column address range
    write_command(0x21); // set column address
    write_command(0x00); // column start address
    write_command(0x7F); // column end address
    
    // set page address range
    write_command(0x22); // set page address
    write_command(0x00); // page start address
    write_command(0x03); // page end address
    
    // send display buffer
    write_data(_display_buffer, sizeof(_display_buffer));
}

void SSD1306Display::turn_on() {
    if (initialized()) {
        write_command(0xAF);
    }
}

void SSD1306Display::turn_off() {
    if (initialized()) {
        write_command(0xAE);
    }
}

void SSD1306Display::set_pixel(int16_t x, int16_t y, bool color) {
    if (x < 0 || x >= DISPLAY_WIDTH || y < 0 || y >= DISPLAY_HEIGHT) {
        return;
    }
    // each byte in the SSD1306 buffer controls 8 vertical pixels, meaning there are 32 columns and 4 rows of bytes
    uint16_t index = x + (y / 8) * DISPLAY_WIDTH;
    // creates the bit mask at the index
    uint8_t bit_mask = 1 << (y % 8);
    
    if (color) {
        _display_buffer[index] |= bit_mask;
    } else {
        _display_buffer[index] &= ~bit_mask;
    }
}

void SSD1306Display::draw_char(int16_t x, int16_t y, unsigned char c, bool color, uint8_t size) {
    if (c < 32 || c > 127) return; // only printable ASCII
    
    const uint8_t* char_data = font_5x8[c - 32];
    
    // for (int col = 0; col < 5; col++) {
    //     uint8_t column = char_data[col];
    //     for (int row = 0; row < 8; row++) {
    //         if (column & (1 << row)) {
    //             set_pixel(x + col, y + row, color);
    //         }
    //     }
    // }

    for (int col = 0; col < 5; col++) {
        uint8_t column = char_data[col];
        for (int row = 0; row < 8; row++, column >>=1) {
            if (column  & 1) {
                if (size == 1) {
                    set_pixel(x + col, y + row, color);
                } else {
                    // draw larger character
                    fill_rectangle(x + col * size, y + row * size, size, size, color);
                }
            }
            // if (column & (1 << row)) {
            //     set_pixel(x + col, y + row, color);
            // }
        }
    }
}

void SSD1306Display::draw_string(int16_t x, int16_t y, const char* text, bool color, uint8_t size) {
    int16_t cursor_x = x;
    
    while (*text) {
        if (*text == '\n') {
            cursor_x = x;
            y += 8; // move to next line, guess 8 is fine for now. Work with 4 rows
        } else {
            draw_char(cursor_x, y, *text, color, size);
            cursor_x += 6 * size; // character width (default 5) + spacing (1)
        }
        text++;
    }
}

void SSD1306Display::draw_string(int16_t x, int16_t y, const std::string& text, bool color, uint8_t size) {
    draw_string(x, y, text.c_str(), color);
}

void SSD1306Display::draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, bool color) {
    int16_t dx = abs(x1 - x0);
    int16_t dy = abs(y1 - y0);
    int16_t sx = (x0 < x1) ? 1 : -1;
    int16_t sy = (y0 < y1) ? 1 : -1;
    int16_t err = dx - dy;
    
    while (true) {
        set_pixel(x0, y0, color);
        
        if (x0 == x1 && y0 == y1) break;
        
        int16_t e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x0 += sx;
        }
        if (e2 < dx) {
            err += dx;
            y0 += sy;
        }
    }
}

void SSD1306Display::draw_rectangle(int16_t x, int16_t y, int16_t width, int16_t height, bool color) {
    draw_line(x, y, x + width - 1, y, color);
    draw_line(x + width - 1, y, x + width - 1, y + height - 1, color);
    draw_line(x + width - 1, y + height - 1, x, y + height - 1, color);
    draw_line(x, y + height - 1, x, y, color);
}

void SSD1306Display::fill_rectangle(int16_t x, int16_t y, int16_t width, int16_t height, bool color) {
    for (int16_t i = x; i < x + width; i++) {
        for (int16_t j = y; j < y + height; j++) {
            set_pixel(i, j, color);
        }
    }
}
